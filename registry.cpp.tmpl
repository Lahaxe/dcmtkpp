/*************************************************************************
 * dcmtkpp - Copyright (C) Universite de Strasbourg
 * Distributed under the terms of the CeCILL-B license, as published by
 * the CEA-CNRS-INRIA. Refer to the LICENSE file or to
 * http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
 * for details.
 ************************************************************************/

#include <stdint.h>

#include "dcmtkpp/registry.h"

#include "dcmtkpp/ElementsDictionary.h"
#include "dcmtkpp/Tag.h"
#include "dcmtkpp/VR.h"
#include "dcmtkpp/UIDsDictionary.h"

namespace dcmtkpp
{

namespace registry
{

struct RawElementsDictionaryEntry
{
    uint16_t group;
    uint16_t element;
    char const * name;
    char const * keyword;
    char const * vr;
    char const * vm;
};

ElementsDictionary create_public_dictionary()
{

    RawElementsDictionaryEntry raw_entries[] = {
{% for entry in elements_dictionary %}
        { {{ "0x%04x"|format(entry[0][0]) }}, {{ "0x%04x"|format(entry[0][1]) }},
          "{{ entry[1] }}", "{{ entry[2] }}",  "{{ entry[3] }}", "{{ entry[4] }}" },
{% endfor %}
    };

    ElementsDictionary public_dictionary;
    
    unsigned long const count = sizeof(raw_entries)/sizeof(RawElementsDictionaryEntry);
    for(unsigned long i=0; i<count; ++i)
    {
        RawElementsDictionaryEntry const & raw_entry = raw_entries[i];
        Tag const tag(raw_entry.group, raw_entry.element);
        ElementsDictionaryEntry const entry(
            raw_entry.name, raw_entry.keyword, raw_entry.vr, raw_entry.vm);
        public_dictionary.insert(std::pair<Tag, ElementsDictionaryEntry>(tag, entry));
    }

    return public_dictionary;
}

struct RawUIDsDictionaryEntry
{
    char const * uid;
    char const * name;
    char const * keyword;
    char const * type;
};

UIDsDictionary create_uids_dictionary()
{

    RawUIDsDictionaryEntry raw_entries[] = {
{% for entry in uids %}
        { "{{ entry[0] }}", "{{ entry[1] }}", "{{ entry[2] }}",  "{{ entry[3] }}" },
{% endfor %}
    };

    UIDsDictionary uids_dictionary;
    
    unsigned long const count = sizeof(raw_entries)/sizeof(RawUIDsDictionaryEntry);
    for(unsigned long i=0; i<count; ++i)
    {
        RawUIDsDictionaryEntry const & raw_entry = raw_entries[i];
        UIDsDictionaryEntry const entry(
            raw_entry.name, raw_entry.keyword, raw_entry.type);
        uids_dictionary.insert(std::pair<std::string, UIDsDictionaryEntry>(raw_entry.uid, entry));
    }

    return uids_dictionary;
}

}

}

dcmtkpp::ElementsDictionary dcmtkpp::registry::public_dictionary=dcmtkpp::registry::create_public_dictionary();
dcmtkpp::UIDsDictionary dcmtkpp::registry::uids_dictionary=dcmtkpp::registry::create_uids_dictionary();
